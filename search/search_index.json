{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MLOps Project","text":"<p>This is the documentation for the MLOps project, containing homework implementations for the MLOps course.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This project demonstrates modern MLOps practices including:</p> <ul> <li>Automated testing and linting</li> <li>Containerization with Docker</li> <li>CI/CD pipeline with GitHub Actions</li> <li>Documentation with MkDocs</li> <li>Dependency management with Poetry</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/EgorovM/itmo-mlops-2025\ncd mlops-project\n\n# Install dependencies with Poetry\npoetry install\n\n# Run tests\npoetry run pytest\n\n# Build and run with Docker\ndocker-compose up\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The project follows a standard Python package structure with additional MLOps components:</p> <pre><code>.\n\u251c\u2500\u2500 src/               # Source code\n\u251c\u2500\u2500 docs/              # Documentation\n\u251c\u2500\u2500 tests/             # Test files\n\u251c\u2500\u2500 .github/           # GitHub Actions workflows\n\u251c\u2500\u2500 Dockerfile        # Container configuration\n\u2514\u2500\u2500 docker-compose.yml # Local development setup\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>For detailed API documentation, please see the API Reference section.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with the MLOps project.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.11 or higher</li> <li>Poetry (Python package manager)</li> <li>Docker (for containerization)</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/EgorovM/itmo-mlops-2025.git\ncd itmo-mlops-2025\n</code></pre></p> </li> <li> <p>Install dependencies using Poetry: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks: <pre><code>poetry run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#running-tests","title":"Running Tests","text":"<p>Run the tests using pytest: <pre><code>poetry run pytest\n</code></pre></p>"},{"location":"getting-started/#building-documentation","title":"Building Documentation","text":"<p>To build and serve the documentation locally: <pre><code>poetry run mkdocs serve\n</code></pre></p> <p>Then visit http://127.0.0.1:8000 to view the documentation.</p>"},{"location":"getting-started/#using-docker","title":"Using Docker","text":"<p>Build and run the project using Docker:</p> <pre><code>docker build -t mlops-project .\ndocker run mlops-project\n</code></pre> <p>Or use docker-compose:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a new branch for your feature: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them: <pre><code>git add .\ngit commit -m \"feat: your feature description\"\n</code></pre></p> </li> <li> <p>Push your changes and create a pull request: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Wait for CI checks to pass and review </p> </li> </ol>"},{"location":"api/core/","title":"API Reference","text":"<p>This section contains the automatically generated API reference for the project.</p>"},{"location":"api/core/#core-module","title":"Core Module","text":""},{"location":"api/core/#mlops.core","title":"<code>mlops.core</code>","text":"<p>Core functionality module.</p>"},{"location":"api/core/#mlops.core.add","title":"<code>add(a, b)</code>","text":"<p>Add two numbers.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>First number</p> required <code>b</code> <code>int</code> <p>Second number</p> required <p>Returns:</p> Type Description <code>int</code> <p>Sum of a and b</p> Source code in <code>src/mlops/core.py</code> <pre><code>def add(a: int, b: int) -&gt; int:\n    \"\"\"Add two numbers.\n\n    Args:\n        a: First number\n        b: Second number\n\n    Returns:\n        Sum of a and b\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Thank you for considering contributing to the MLOps project! This document provides guidelines and best practices for contributing.</p>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use several tools to maintain code quality:</p> <ul> <li>Black: For code formatting</li> <li>Flake8: For code linting</li> <li>Pre-commit hooks: For automated checks before commits</li> </ul>"},{"location":"development/contributing/#development-process","title":"Development Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests and linting</li> <li>Submit a pull request</li> </ol>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>We follow the Conventional Commits specification:</p> <ul> <li><code>feat:</code> New features</li> <li><code>fix:</code> Bug fixes</li> <li><code>docs:</code> Documentation changes</li> <li><code>style:</code> Code style changes</li> <li><code>refactor:</code> Code refactoring</li> <li><code>test:</code> Adding or modifying tests</li> <li><code>chore:</code> Maintenance tasks</li> </ul> <p>Example: <pre><code>feat: add user authentication system\n</code></pre></p>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update documentation if needed</li> <li>Add tests for new features</li> <li>Ensure CI passes</li> <li>Get review from maintainers</li> </ol>"},{"location":"development/contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>poetry run pre-commit install\n</code></pre></p> </li> <li> <p>Run tests: <pre><code>poetry run pytest\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any new features</li> <li>Use docstrings for Python functions</li> <li>Keep README.md up to date </li> </ul>"},{"location":"development/workflow/","title":"Development Workflow","text":"<p>This project follows GitHub Flow, a lightweight, branch-based workflow.</p>"},{"location":"development/workflow/#github-flow","title":"GitHub Flow","text":"<ol> <li>Main Branch</li> <li>The <code>main</code> branch is always deployable</li> <li>All feature development and fixes branch from <code>main</code></li> <li> <p>Merges to <code>main</code> trigger deployments</p> </li> <li> <p>Feature Branches</p> </li> <li>Create a branch for each feature/fix</li> <li> <p>Use descriptive names with prefixes:</p> <ul> <li><code>feature/</code> for new features</li> <li><code>fix/</code> for bug fixes</li> <li><code>docs/</code> for documentation</li> <li><code>refactor/</code> for code refactoring</li> </ul> </li> <li> <p>Development Process <pre><code># Create a new branch\ngit checkout -b feature/new-feature\n\n# Make changes and commit\ngit add .\ngit commit -m \"feat: add new feature\"\n\n# Push changes\ngit push origin feature/new-feature\n</code></pre></p> </li> <li> <p>Pull Requests</p> </li> <li>Create a PR when your feature is ready</li> <li>Fill in the PR template</li> <li>Request reviews from team members</li> <li> <p>Address review comments</p> </li> <li> <p>CI/CD Pipeline</p> </li> <li>Automated checks run on every PR:<ul> <li>Code linting</li> <li>Tests</li> <li>Documentation build</li> </ul> </li> <li> <p>Successful checks required for merge</p> </li> <li> <p>Deployment</p> </li> <li>Merges to <code>main</code> trigger:<ul> <li>Docker image build and push</li> <li>Documentation deployment</li> <li>Package publication</li> </ul> </li> </ol>"},{"location":"development/workflow/#best-practices","title":"Best Practices","text":"<ol> <li>Commits</li> <li>Use conventional commit messages</li> <li>Keep commits focused and atomic</li> <li> <p>Write clear commit descriptions</p> </li> <li> <p>Code Quality</p> </li> <li>Run linters locally before pushing</li> <li>Add tests for new features</li> <li> <p>Update documentation</p> </li> <li> <p>Reviews</p> </li> <li>Review PRs promptly</li> <li>Provide constructive feedback</li> <li> <p>Test changes locally if needed</p> </li> <li> <p>Documentation</p> </li> <li>Update docs with code changes</li> <li>Keep README current</li> <li>Add inline code comments </li> </ol>"}]}